{{- define "object"}}
  {{- if (index . 0)}}
    {{- $o := index . 0}}
    {{- $m := ".*"}}
    {{- if (index . 1)}}{{$m = index . 1}}{{end}}
    {{- range $k, $v := $o}}
      {{- if ($k | regexMatch $m)}}
        {{- printf "<b>%s</b> => %s<br>" $k (toString $v)}}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}

{{- define "text"}}
  {{- if eq .type "K8sEvent"}}
    {{- if not (.data.user.name | regexMatch "(system:serviceaccount:*|system:*)")}}
      {{- printf "%s\n%s / %s" (upper .data.operation) .data.kind .data.location}}
    {{- end}}
  {{- end}}
  {{- if eq .type "AlertmanagerEvent"}}{{- printf "%s\n%s" (upper .data.status) .data.labels.alertname}}{{- end}}

  {{- if and (eq .type "KubeEvent") (ne .data.reason "DNSConfigForming")}}
      {{- printf "%s" .data.message}}
  {{- end}}

  {{- if eq .type "WinEvent"}}{{- printf "[%s]%s: %s %s" .data.tags.LevelText (upper .data.tags.host) .data.tags.EventRecordID .data.tags.Message }}{{- end}}

  {{- if eq .type "ObserviumEvent"}}
    {{- if not (.data.ALERT_STATE eq "ALERT REMINDER") }}
      {{- printf "%s<br/>State: <b>%s</b><br/>URL: <a href=\"%s\">here</a>" .data.TITLE .data.ALERT_STATE .data.ALERT_URL }}
    {{-end}}
  {{- end}}

  {{- if eq .type "GitlabEvent"}}
    {{- $match := getEnv "EVENTS_GITLAB_RUNNERS"}}{{$ok := false}}
    {{- if .data.builds}}
      {{- range .data.builds}}
        {{- if and (.runner.description | regexMatch $match) (not (empty .finished_at))}}{{$ok = true}}{{end}}
      {{- end}}
    {{- else}}
      {{- if and (.data.runner.description | regexMatch $match) (not (empty .data.build_duration))}}{{$ok = true}}{{end}}
    {{- end}}
    {{- if $ok}}
      {{- if .data.project}}{{- printf "%s\n<a href=\"%s\">%s / %s@%s</a>" (upper .data.object_kind) .data.commit.url .data.project.namespace .data.project.name .data.object_attributes.ref}}
      {{- else}}{{- printf "%s\n<a href=\"%s/-/commit/%s\">%s@%s</a>" (upper .data.object_kind) .data.repository.homepage .data.commit.sha .data.project_name .data.ref}}{{end}}
    {{- end}}
  {{- end}}

  {{- if eq .type "AWSEvent"}}
    {{- template "object" (list .data.detail.requestParameters "(networkInterfaceId)")}}
    {{- template "object" (list .data.detail.responseElements "(device|volumeId)")}}
    {{- template "object" (list .data.detail.userIdentity "(accessKeyId|arn)")}}
    {{- template "object" (list .data.detail "(CommonName|DaysToExpiry|eventName|EC2InstnaceId|Cause|stoppedReason|taskArn|userAgent)")}}
    {{- template "object" (list .data "(detail-type)")}}
  {{- end}}
  {{- if eq .type "vcenterEvent"}}
    {{- if .data.Subject}}
    {{- if (.data.Subject | regexMatch "(com.vmware.vc.sdrs.*|Vm.*)")}}
    {{- if not (.data.Subject | regexMatch "VmAcquiredTicketEvent")}}
      {{- printf "%s\n" .data.VmName }}
      {{- printf "%s -> %s\n" .data.OrigESXiHostName  .data.DestESXiHostName  }}
    {{- end}}
    {{- end}}
    {{- end}}
  {{- end}}
{{- end}}

{{- define "grafana-message"}}{{- if .data}}{{template "text" .}}{{end}}{{- end}}
